#!/usr/bin/env node

const yargs = require('yargs');
const main = require('../');

const exitOnError = async function(promise) {
  try {
    await promise;
  } catch (e) {
    console.log("Error: ", e);
    process.exit(1);
  }
}

const deploy = {
  command: 'deploy',
  desc: 'deploy your smart contract',
  builder: (yargs) => yargs
    .option('wasmFile', {
      desc: 'Path to wasm file to deploy',
      type: 'string',
      default: './out/main.wasm'
    })
    .alias({
      'accountId': ['account_id', 'contractName', 'contract_name'],
    }),
  handler: (argv) => exitOnError(main.deploy(argv))
};

const scheduleFunctionCall = {
  command: 'call <contractName> <methodName> [args]',
  desc: 'schedule smart contract call which can modify state',
  builder: (yargs) => yargs
    .option('amount', {
      desc: 'Number of tokens to attach',
      type: 'string',
      default: '1000000000'
    }),
  handler: (argv) => exitOnError(main.scheduleFunctionCall(argv))
};

const callViewFunction = {
  command: 'view <contractName> <methodName> [args]',
  desc: 'make smart contract call which can view state',
  builder: (yargs) => yargs,
  handler: (argv) => exitOnError(main.callViewFunction(argv))
};

const sendMoney = {
  command: 'send <sender> <receiver> <amount>',
  desc: 'send tokens to given receiver',
  builder: (yargs) => yargs,
  handler: (argv) => exitOnError(main.sendMoney(argv))
};

const { spawn } = require('child_process');
const build = {
  command: 'build',
  desc: 'build your smart contract',
  handler: (argv) => {
    const gulp = spawn('gulp');
    gulp.stdout.on('data', function (data) {
      console.log(data.toString());
    });
    gulp.stderr.on('data', function (data) {
      console.log(data.toString());
    });
    gulp.on('exit', function (code) {
      process.exit(code);
    });
  }
};

const createAccount = {
  command: 'create_account <accountId>',
  desc: 'create a developer account',
  builder: (yargs) => yargs
    .option('accountId', {
      desc: 'Unique identifier for the newly created account',
      type: 'string',
      required: true
    })
    .option('masterAccount', {
      desc: 'Account used to create requested account.',
      type: 'string',
      required: true
    })
    .option('publicKey', {
      desc: 'Public key to initialize the account with',
      type: 'string',
      required: false
    })
    .option('initialBalance', {
      desc: 'Number of tokens to transfer to newly created account',
      type: 'string',
      required: true
    }),
  handler: (argv) => exitOnError(main.createAccount(argv))
};

const login = {
  command: 'login',
  desc: 'create a developer account',
  builder: (yargs) => yargs,
  handler: (argv) => exitOnError(main.login(argv))
};

const viewAccount = {
  command: 'state <accountId>',
  desc: 'view account',
  builder: (yargs) => yargs
    .option('accountId', {
      desc: 'Account to view',
      type: 'string',
      required: true
    }),
  handler: (argv) => exitOnError(main.viewAccount(argv))
};

const keys = {
  command: 'keys <accountId>',
  desc: 'view account public keys',
  builder: (yargs) => yargs
    .option('accountId', {
      desc: 'Account to view',
      type: 'string',
      required: true
    }),
  handler: (argv) => exitOnError(main.keys(argv))
};

const txStatus = {
  command: 'tx-status <hash>',
  desc: 'lookup transaction status by hash',
  builder: (yargs) => yargs
    .option('hash', {
      desc: 'base58-encoded hash',
      type: 'string',
      required: true
    }),
  handler: (argv) => exitOnError(main.txStatus(argv))
};

const clean = {
  command: 'clean',
  desc: 'clean the build environment',
  builder: (yargs) => yargs
    .option('outDir', {
      desc: 'build directory',
      type: 'string',
      default: './out'
    }),
  handler: (argv) => exitOnError(main.clean(argv))
};

const newProject = {
  command: 'new_project [projectDir]',
  desc: 'create a new blank project',
  builder: (yargs) => yargs
    .option('projectDir', {
      desc: 'project directory',
      type: 'string',
      default: '.'
    }),
  handler: (argv) => exitOnError(main.newProject(argv))
};

const reactProject = {
  command: 'new_react_project [projectDir]',
  desc: 'create a new blank react project',
  builder: (yargs) => yargs
    .option('projectDir', {
      desc: 'project directory',
      type: 'string',
      default: '.'
    }),
  handler: (argv) => exitOnError(main.reactProject(argv))
};


const stake = {
  command: 'stake [accountId] [publicKey] [amount]',
  desc: 'create staking transaction',
  builder: (yargs) => yargs
    .option('accountId', {
      desc: 'Account to stake on',
      type: 'string',
      required: true,
    })
    .option('publicKey', {
      descr: 'Public key to stake with (base58 encoded)',
      type: 'string',
      required: true,
    })
    .option('amount', {
      descr: 'Amount to stake',
      type: 'string',
      required: true,
    }),
    handler: (argv) => exitOnError(main.stake(argv))
}

let config = require('../get-config')();
yargs // eslint-disable-line
  .option('nodeUrl', {
    desc: 'NEAR node URL',
    type: 'string',
    default: 'http://localhost:3030'
  })
  .option('networkId', {
    desc: 'NEAR network ID, allows using different keys based on network',
    type: 'string',
    default: 'default'
  })
  .option('helperUrl', {
    desc: 'NEAR contract helper URL',
    type: 'string',
  })
  .option('keyPath', {
    desc: 'Path to master account key',
    type: 'string',
  })
  .option('homeDir', {
    desc: 'Where to look for master account, default is ~/.near',
    type: 'string',
    default: `${process.env.HOME}/.near`,
  })
  .option('accountId', {
    desc: 'Unique identifier for the account',
    type: 'string',
  })
  .command(createAccount)
  .command(viewAccount)
  .command(keys)
  .command(txStatus)
  .command(build)
  .command(deploy)
  .command(scheduleFunctionCall)
  .command(callViewFunction)
  .command(viewAccount)
  .command(sendMoney)
  .command(clean)
  .command(newProject)
  .command(reactProject)
  .command(stake)
  .command(login)
  .config(config)
  .alias({
    'accountId': ['account_id'],
    'nodeUrl': 'node_url',
    'networkId': ['network_id'],
    'wasmFile': 'wasm_file',
    'projectDir': 'project_dir',
    'outDir': 'out_dir'
  })
  .showHelpOnFail(true)
  .demandCommand(1, 'Please enter a command')
  .argv;

